/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PositionManager,
  PositionManagerInterface,
} from "../../../contracts/position/PositionManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "contract IReferralStorage",
        name: "referralStorage",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
            ],
            internalType: "struct Position.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeInUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "sizeInTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "collateralAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowingFactor",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fundingFeeAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "shortTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "increasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtBlock",
                type: "uint256",
              },
            ],
            internalType: "struct Position.Numbers",
            name: "numbers",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isLong",
                type: "bool",
              },
            ],
            internalType: "struct Position.Flags",
            name: "flags",
            type: "tuple",
          },
        ],
        internalType: "struct Position.Props",
        name: "position",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "shouldValidateMinCollateralUsd",
        type: "bool",
      },
    ],
    name: "isPositionLiquidatable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "remainingCollateralUsd",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minCollateralUsd",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minCollateralUsdForLeverage",
            type: "int256",
          },
        ],
        internalType: "struct PositionUtils.IsPositionLiquidatableInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506107d2806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063750c48a414610030575b600080fd5b61004361003e366004610357565b61005b565b604051610052939291906104f3565b60405180910390f35b6000606061008360405180606001604052806000815260200160008152602001600081525090565b604051633e2d58cd60e21b815273__$91a1a7f12f728c8759f4be979bae55555f$__9063f8b56334906100c4908c908c908c908c908c908c90600401610590565b600060405180830381865af41580156100e1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261010991908101906106e3565b92509250925096509650969350505050565b6001600160a01b038116811461013057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561016b5761016b610133565b60405290565b60405161012081016001600160401b038111828210171561016b5761016b610133565b604051601f8201601f191681016001600160401b03811182821017156101bc576101bc610133565b604052919050565b801515811461013057600080fd5b80356101dd816101c4565b919050565b6000602082840312156101f457600080fd5b604051602081016001600160401b038111828210171561021657610216610133565b6040529050808235610227816101c4565b905292915050565b60006080828403121561024157600080fd5b604051608081016001600160401b038111828210171561026357610263610133565b60405290508082356102748161011b565b815260208301356102848161011b565b602082015260408301356102978161011b565b604082015260608301356102aa8161011b565b6060919091015292915050565b6000604082840312156102c957600080fd5b604080519081016001600160401b03811182821017156102eb576102eb610133565b604052823581526020928301359281019290925250919050565b600060c0828403121561031757600080fd5b61031f610149565b905061032b83836102b7565b815261033a83604084016102b7565b602082015261034c83608084016102b7565b604082015292915050565b60008060008060008086880361034081121561037257600080fd5b873561037d8161011b565b9650602088013561038d8161011b565b9550603f1981016101a0808212156103a457600080fd5b6103ac610149565b60608312156103ba57600080fd5b6103c2610149565b925060408b01356103d28161011b565b835260608b01356103e28161011b565b602084015260808b01356103f58161011b565b604084015291825261012091609f19840183131561041257600080fd5b61041a610171565b935060a08b0135845260c08b0135602085015260e08b01356040850152610100808c01356060860152838c013560808601526101408c013560a08601526101608c013560c08601526101808c013560e0860152828c0135818601525083602082015261048a8c6101c08d016101e2565b6040820152809750505050506104a4886101e0890161022f565b92506104b4886102608901610305565b91506104c361032088016101d2565b90509295509295509295565b60005b838110156104ea5781810151838201526020016104d2565b50506000910152565b831515815260a06020820152600083518060a084015261051a8160c08501602088016104cf565b60c0601f19601f830116840101915050825160408301526020830151606083015260408301516080830152949350505050565b61056282825180518252602090810151910152565b602081810151805160408501529081015160608401525060400151805160808301526020015160a090910152565b60006103408201905060018060a01b0380891683528088166020840152865181815116604085015281602082015116606085015281604082015116608085015250506020860151805160a0840152602081015160c0840152604081015160e084015260608101516101008181860152608083015161012086015260a083015161014086015260c083015161016086015260e0830151610180860152808301516101a0860152505050604086015161064d6101c08401825115159052565b5084516001600160a01b039081166101e0840152602086015181166102008401526040860151811661022084015260608601511661024083015261069561026083018561054d565b821515610320830152979650505050505050565b6000606082840312156106bb57600080fd5b6106c3610149565b905081518152602082015160208201526040820151604082015292915050565b600080600060a084860312156106f857600080fd5b8351610703816101c4565b60208501519093506001600160401b038082111561072057600080fd5b818601915086601f83011261073457600080fd5b81518181111561074657610746610133565b610759601f8201601f1916602001610194565b915080825287602082850101111561077057600080fd5b6107818160208401602086016104cf565b509250610793905085604086016106a9565b9050925092509256fea264697066735822122044f422c13cdb67af8f811c84aff81acec8beba3bb6b17cfebdfbef564a7d07dd64736f6c63430008120033";

type PositionManagerConstructorParams =
  | [linkLibraryAddresses: PositionManagerLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PositionManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class PositionManager__factory extends ContractFactory {
  constructor(...args: PositionManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        PositionManager__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: PositionManagerLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$91a1a7f12f728c8759f4be979bae55555f\\$__", "g"),
      linkLibraryAddresses["contracts/position/PositionUtils.sol:PositionUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PositionManager> {
    return super.deploy(overrides || {}) as Promise<PositionManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PositionManager {
    return super.attach(address) as PositionManager;
  }
  override connect(signer: Signer): PositionManager__factory {
    return super.connect(signer) as PositionManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositionManagerInterface {
    return new utils.Interface(_abi) as PositionManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PositionManager {
    return new Contract(address, _abi, signerOrProvider) as PositionManager;
  }
}

export interface PositionManagerLibraryAddresses {
  ["contracts/position/PositionUtils.sol:PositionUtils"]: string;
}
