/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MarketStoreUtilsTest,
  MarketStoreUtilsTestInterface,
} from "../../../contracts/test/MarketStoreUtilsTest";

const _abi = [
  {
    inputs: [],
    name: "getEmptyMarket",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "string",
        name: "label",
        type: "string",
      },
      {
        internalType: "address",
        name: "indexToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "longToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "shortToken",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "marketType",
        type: "bytes32",
      },
    ],
    name: "getMarketSaltHash",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
    ],
    name: "removeMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "string",
        name: "label",
        type: "string",
      },
      {
        internalType: "address",
        name: "indexToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "longToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "shortToken",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "marketType",
        type: "bytes32",
      },
    ],
    name: "removeMarketSaltHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
    ],
    name: "setMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061077f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632b73c90d1461005c5780638593caac1461007157806398a8ac201461008f578063b8f12891146100ba578063f034bb07146100cd575b600080fd5b61006f61006a36600461043c565b6100e0565b005b610079610153565b6040516100869190610543565b60405180910390f35b6100a261009d366004610557565b610168565b6040516001600160a01b039091168152602001610086565b61006f6100c8366004610638565b61021f565b61006f6100db366004610557565b610296565b6040516303bc2fb360e51b815273__$ff439aa65a80c9eec648f15db20b189505$__90637785f6609061011d908790879087908790600401610671565b60006040518083038186803b15801561013557600080fd5b505af4158015610149573d6000803e3d6000fd5b5050505050505050565b61015b6103ac565b6101636103ac565b919050565b60008086868686866040516020016101849594939291906106a6565b604051602081830303815290604052805190602001209050876001600160a01b03166321f8a7216101b48361033a565b6040518263ffffffff1660e01b81526004016101d291815260200190565b602060405180830381865afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102139190610725565b98975050505050505050565b60405163b4fd626560e01b81526001600160a01b0380841660048301528216602482015273__$ff439aa65a80c9eec648f15db20b189505$__9063b4fd62659060440160006040518083038186803b15801561027a57600080fd5b505af415801561028e573d6000803e3d6000fd5b505050505050565b600085858585856040516020016102b19594939291906106a6565b604051602081830303815290604052805190602001209050866001600160a01b0316639faf6fb66102e18361033a565b6040518263ffffffff1660e01b81526004016102ff91815260200190565b600060405180830381600087803b15801561031957600080fd5b505af115801561032d573d6000803e3d6000fd5b5050505050505050505050565b600060405160200161036b906020808252600b908201526a13505492d15517d4d0531560aa1b604082015260600190565b60408051601f198184030181528282528051602091820120908301528101839052606001604051602081830303815290604052805190602001209050919050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6001600160a01b03811681146103e857600080fd5b50565b8035610163816103d3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610434576104346103f6565b604052919050565b60008060008084860360e081121561045357600080fd5b853561045e816103d3565b9450602086013561046e816103d3565b9350604086013592506080605f198201121561048957600080fd5b50604051608081016001600160401b03811182821017156104ac576104ac6103f6565b60405260608601356104bd816103d3565b815260808601356104cd816103d3565b602082015260a08601356104e0816103d3565b604082015260c08601356104f3816103d3565b6060820152939692955090935050565b6001600160a01b03169052565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b608081016105518284610510565b92915050565b60008060008060008060c0878903121561057057600080fd5b863561057b816103d3565b95506020878101356001600160401b038082111561059857600080fd5b818a0191508a601f8301126105ac57600080fd5b8135818111156105be576105be6103f6565b6105d0601f8201601f1916850161040c565b91508082528b848285010111156105e657600080fd5b8084840185840137600084828401015250809750505050610609604088016103eb565b9350610617606088016103eb565b9250610625608088016103eb565b915060a087013590509295509295509295565b6000806040838503121561064b57600080fd5b8235610656816103d3565b91506020830135610666816103d3565b809150509250929050565b6001600160a01b038581168252841660208201526040810183905260e0810161069d6060830184610510565b95945050505050565b60a08152600086518060a084015260005b818110156106d4576020818a0181015160c08684010152016106b7565b50600060c0828501015260c0601f19601f8301168401019150506106fb6020830187610503565b6107086040830186610503565b6107156060830185610503565b8260808301529695505050505050565b60006020828403121561073757600080fd5b8151610742816103d3565b939250505056fea26469706673582212208f3f517257414608fa783fb35968813d658b7e60ae99765075187eb967b935ad64736f6c63430008120033";

type MarketStoreUtilsTestConstructorParams =
  | [
      linkLibraryAddresses: MarketStoreUtilsTestLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarketStoreUtilsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MarketStoreUtilsTest__factory extends ContractFactory {
  constructor(...args: MarketStoreUtilsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MarketStoreUtilsTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MarketStoreUtilsTestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$ff439aa65a80c9eec648f15db20b189505\\$__", "g"),
      linkLibraryAddresses[
        "contracts/market/MarketStoreUtils.sol:MarketStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MarketStoreUtilsTest> {
    return super.deploy(overrides || {}) as Promise<MarketStoreUtilsTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MarketStoreUtilsTest {
    return super.attach(address) as MarketStoreUtilsTest;
  }
  override connect(signer: Signer): MarketStoreUtilsTest__factory {
    return super.connect(signer) as MarketStoreUtilsTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketStoreUtilsTestInterface {
    return new utils.Interface(_abi) as MarketStoreUtilsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarketStoreUtilsTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MarketStoreUtilsTest;
  }
}

export interface MarketStoreUtilsTestLibraryAddresses {
  ["contracts/market/MarketStoreUtils.sol:MarketStoreUtils"]: string;
}
